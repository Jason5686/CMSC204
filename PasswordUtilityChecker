/**
 * @author Jason Li
 * @version 9/11/21
 * @param args
 */

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.print.attribute.standard.MediaSize.Engineering;

public class PasswordCheckerUtility {
	
	/**
	 * 
	 * @param _password
	 * @param _passwordConfirm
	 * @throws UnmatchedException
	 */
	public static void comparePasswords(String _password,String _passwordConfirm)throws UnmatchedException
	{
		if(!_password.contentEquals(_passwordConfirm))
		{
			throw new UnmatchedException();
		}
	}
	
	/**
	 * 
	 * @param password
	 * @param passwordConfirm
	 * @return boolean true if passwords match
	 */
	public static boolean comparePasswordsWithReturn(String password,String passwordConfirm)
	{
		if(password.equals(passwordConfirm))
		{
			return true;
		}
		
		return false;
	}
	
	/**
	 * 
	 * @param passwords
	 * @return ArrayList<String>
	 */
	public static ArrayList<String> getInvalidPasswords(ArrayList<String> passwords)
	{
		ArrayList<String> invalidPasswords = new ArrayList<String>();
		
		for(int i = 0; i < passwords.size(); i++)
		{
			try 
			{
				if(isValidPassword(passwords.get(i)) != true)
				{
					invalidPasswords.add(passwords.get(i));
				}
			} 
			catch (LengthException | NoUpperAlphaException | NoLowerAlphaException | NoDigitException | NoSpecialCharacterException | InvalidSequenceException e) 
			{
				invalidPasswords.add(passwords.get(i) + " -> " + e.getMessage());
			} 
		}
		
		return invalidPasswords;
		
	}
	
	/**
	 * 
	 * @param password
	 * @return boolean true if password contains 6 to 9 characters
	 */
	public static boolean hasBetweenSixAndNineChars(String password)
	{
		int count = 0;
		
		for(int i = 0; i < password.length(); i++)
		{
			count++;
		}
		
		if(count == 6 || count == 7 || count == 8 || count == 9)
		{
			return true;
		}
		
		return false;
		
	}
	
	/**
	 * 
	 * @param password
	 * @return boolean true if password has a digit
	 * @throws NoDigitException
	 */
	public static boolean hasDigit(String password)throws NoDigitException
	{
		
		char[] character = password.toCharArray();
		
		for(int i = 0; i < password.length(); i++)
		{
			
			character[i] = password.charAt(i);
			
			if(Character.isDigit(character[i]))
			{
				return true;
			}
			
		}
		
		
		throw new NoDigitException();

	}
	
	/**
	 * 
	 * @param password
	 * @return boolean true if password has a lower case 
	 * @throws NoLowerAlphaException
	 */
	public static boolean hasLowerAlpha(String password)throws NoLowerAlphaException
	{
		for(int i = 0; i < password.length(); i++)
		{
			if(Character.isLowerCase(password.charAt(i)))
			{
				return true;
			}
		}
		
		throw new NoLowerAlphaException();
	}
		
	/**
	 * 
	 * @param password
	 * @return boolean true if password does not repeat same character more than 2 times in a row
	 * @throws InvalidSequenceException
	 */
	public static boolean hasSameCharInSequence(String password)throws InvalidSequenceException
	{
		Character firstChar;
		Character secondChar;
		Character currentChar;
		
		for(int i = 0; i < password.length() - 2; i++)
		{
			firstChar = password.charAt(i);
			secondChar = password.charAt(i + 1);
			currentChar = password.charAt(i + 2);
			
			if(firstChar == secondChar && secondChar == currentChar)
			{
				throw new InvalidSequenceException();
			}
		}
		
		return true;
	
	}
	
	/**
	 * 
	 * @param password
	 * @return boolean true if password has a special character
	 * @throws NoSpecialCharacterException
	 */
	public static boolean hasSpecialChar(String password)throws NoSpecialCharacterException
	{
		Pattern pattern = Pattern.compile("[a-zA-Z0-9]*");
		Matcher matcher = pattern.matcher(password);
		
		if(matcher.matches()) 
		{
			throw new NoSpecialCharacterException();
		}
		
		return (!matcher.matches());
	}
	
	/**
	 * 
	 * @param password
	 * @return boolean true if password has upper case 
	 * @throws NoUpperAlphaException
	 */
	public static boolean hasUpperAlpha(String password)throws NoUpperAlphaException
	{
		for(int i = 0; i < password.length(); i++)
		{
			if(Character.isUpperCase(password.charAt(i)))
			{
				return true;
			}
		}
		
		throw new NoUpperAlphaException();
	}
	
	/**
	 * 
	 * @param password
	 * @return boolean true if password is longer than 6 characters
	 * @throws LengthException
	 */
	public static boolean isValidLength(String password)throws LengthException
	{
		
		if( password.length() >= 6)
		{
			return true;
		}
		else 
		{
			throw new LengthException();
		}
		
		
	}
	
	/**
	 * 
	 * @param password
	 * @return boolean true is no excpetion is thrown
	 * @throws LengthException
	 * @throws NoUpperAlphaException
	 * @throws NoLowerAlphaException
	 * @throws NoDigitException
	 * @throws NoSpecialCharacterException
	 * @throws InvalidSequenceException
	 */
	public static boolean isValidPassword(String password)throws LengthException,NoUpperAlphaException,NoLowerAlphaException,NoDigitException,NoSpecialCharacterException,InvalidSequenceException
	{
		
		try 
		{ 
			isValidLength(password);
		}
		catch(LengthException ex) 
		{
			throw new LengthException();
		}
		
		try 
		{ 
			hasUpperAlpha(password);
		}
		catch(NoUpperAlphaException ex) 
		{
			throw new NoUpperAlphaException("The password must contain at least one uppercase alphabetic character");
		}
		
		try 
		{ 
			hasLowerAlpha(password);
		}
		catch(NoLowerAlphaException ex) 
		{
			throw new NoLowerAlphaException("The password must contain at least one lowercase alphabetic character");
		}


		try 
		{ 
			hasDigit(password);
		}
		catch(NoDigitException ex) 
		{
			throw new NoDigitException("The password must contain at least one digit");
		}
		
		try 
		{ 
			hasSpecialChar(password);
		}
		catch(NoSpecialCharacterException ex) 
		{
			throw new NoSpecialCharacterException("The password must contain at least one special character");
		}
		
		try 
		{ 
			hasSameCharInSequence(password);
		}
		catch(InvalidSequenceException ex) 
		{
			throw new InvalidSequenceException("The password cannot contain more than two of the same character in sequence.");
		}
		
		return true;
		
	}
	
	/**
	 * 
	 * @param password
	 * @return boolean true is password has 6 to 9 characters
	 * @throws WeakPasswordException
	 */
	public static boolean isWeakPassword(String password)throws WeakPasswordException
	{
		int count = 0;
		
		for(int i = 0; i < password.length(); i++)
		{
			count++;
		}
		
		if( count >= 6 && count <= 9)
		{
			throw new WeakPasswordException();
		}
		else
		{
			return false;
		}
	}
}
